package com.coconason.dtf.demo3.po;

import java.util.ArrayList;
import java.util.List;

public class TeacherExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Teacher
     */
    private String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Teacher
     */
    private boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table Teacher
     */
    private List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     */
    public TeacherExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @param orderByClause String
     */
    public void setOrderByClause(final String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @return orderByClause String
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @param distinct boolean
     */
    public void setDistinct(final boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @return whether is distinct
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @return list of criteria
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @param criteria Criteria
     */
    public void or(final Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @return criteria
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     * 
     * @return criteria
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     */
    private Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Teacher
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Teacher
     */
    protected abstract static class GeneratedCriteria {
        
        private List<Criterion> criteria;

        private GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }
        
        public boolean isValid() {
            return criteria.size() > 0;
        }
        
        public List<Criterion> getAllCriteria() {
            return criteria;
        }
        
        public List<Criterion> getCriteria() {
            return criteria;
        }

        private void addCriterion(final String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        private void addCriterion(final String condition, final Object value, final String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        private void addCriterion(final String condition, final Object value1, final Object value2, final String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andTIsNull() {
            addCriterion("T is null");
            return (Criteria) this;
        }

        public Criteria andTIsNotNull() {
            addCriterion("T is not null");
            return (Criteria) this;
        }

        public Criteria andTEqualTo(final Integer value) {
            addCriterion("T =", value, "t");
            return (Criteria) this;
        }

        public Criteria andTNotEqualTo(final Integer value) {
            addCriterion("T <>", value, "t");
            return (Criteria) this;
        }

        public Criteria andTGreaterThan(final Integer value) {
            addCriterion("T >", value, "t");
            return (Criteria) this;
        }

        public Criteria andTGreaterThanOrEqualTo(final Integer value) {
            addCriterion("T >=", value, "t");
            return (Criteria) this;
        }

        public Criteria andTLessThan(final Integer value) {
            addCriterion("T <", value, "t");
            return (Criteria) this;
        }

        public Criteria andTLessThanOrEqualTo(final Integer value) {
            addCriterion("T <=", value, "t");
            return (Criteria) this;
        }

        public Criteria andTIn(final List<Integer> values) {
            addCriterion("T in", values, "t");
            return (Criteria) this;
        }

        public Criteria andTNotIn(final List<Integer> values) {
            addCriterion("T not in", values, "t");
            return (Criteria) this;
        }

        public Criteria andTBetween(final Integer value1, final Integer value2) {
            addCriterion("T between", value1, value2, "t");
            return (Criteria) this;
        }

        public Criteria andTNotBetween(final Integer value1, final Integer value2) {
            addCriterion("T not between", value1, value2, "t");
            return (Criteria) this;
        }

        public Criteria andTnameIsNull() {
            addCriterion("Tname is null");
            return (Criteria) this;
        }

        public Criteria andTnameIsNotNull() {
            addCriterion("Tname is not null");
            return (Criteria) this;
        }

        public Criteria andTnameEqualTo(final String value) {
            addCriterion("Tname =", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameNotEqualTo(final String value) {
            addCriterion("Tname <>", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameGreaterThan(final String value) {
            addCriterion("Tname >", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameGreaterThanOrEqualTo(final String value) {
            addCriterion("Tname >=", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameLessThan(final String value) {
            addCriterion("Tname <", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameLessThanOrEqualTo(final String value) {
            addCriterion("Tname <=", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameLike(final String value) {
            addCriterion("Tname like", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameNotLike(final String value) {
            addCriterion("Tname not like", value, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameIn(final List<String> values) {
            addCriterion("Tname in", values, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameNotIn(final List<String> values) {
            addCriterion("Tname not in", values, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameBetween(final String value1, final String value2) {
            addCriterion("Tname between", value1, value2, "tname");
            return (Criteria) this;
        }

        public Criteria andTnameNotBetween(final String value1, final String value2) {
            addCriterion("Tname not between", value1, value2, "tname");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Teacher
     */
    public static final class Criteria extends GeneratedCriteria {
        private Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Teacher
     */
    public static final class Criterion {
        
        private String condition;
        
        private Object value;
        
        private Object secondValue;
        
        private boolean noValue;
        
        private boolean singleValue;
        
        private boolean betweenValue;
        
        private boolean listValue;
        
        private String typeHandler;
        
        private Criterion(final String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        private Criterion(final String condition, final Object value, final String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        private Criterion(final String condition, final Object value) {
            this(condition, value, null);
        }

        private Criterion(final String condition, final Object value, final Object secondValue, final String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        private Criterion(final String condition, final Object value, final Object secondValue) {
            this(condition, value, secondValue, null);
        }
        
        /**
         * Get condition.
         *
         * @return condition
         */
        public String getCondition() {
            return condition;
        }

        /**
         * Get value.
         *
         * @return value.
         */
        public Object getValue() {
            return value;
        }

        /**
         * Get second value.
         *
         * @return secondValue.
         */
        public Object getSecondValue() {
            return secondValue;
        }

        /**
         * Is not value.
         *
         * @return noValue
         */
        public boolean isNoValue() {
            return noValue;
        }

        /**
         * Is single value.
         *
         * @return singleValue
         */
        public boolean isSingleValue() {
            return singleValue;
        }

        /**
         * Is between value.
         *
         * @return betweenValue
         */
        public boolean isBetweenValue() {
            return betweenValue;
        }

        /**
         * Is list value.
         *
         * @return listValue
         */
        public boolean isListValue() {
            return listValue;
        }

        /**
         * Get type handler.
         *
         * @return typeHandler
         */
        public String getTypeHandler() {
            return typeHandler;
        }
        
    }
    
}
